<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_ui_action">
    <sys_ui_action action="INSERT_OR_UPDATE">
        <action_name>sysverb_insert</action_name>
        <active>true</active>
        <client>false</client>
        <client_script_v2><![CDATA[function onClick(g_form) {

}]]></client_script_v2>
        <comments/>
        <condition/>
        <form_action>true</form_action>
        <form_button>true</form_button>
        <form_button_v2>false</form_button_v2>
        <form_context_menu>false</form_context_menu>
        <form_link>false</form_link>
        <form_menu_button_v2>false</form_menu_button_v2>
        <form_style/>
        <hint/>
        <isolate_script>false</isolate_script>
        <list_action>false</list_action>
        <list_banner_button>false</list_banner_button>
        <list_button>false</list_button>
        <list_choice>false</list_choice>
        <list_context_menu>false</list_context_menu>
        <list_link>false</list_link>
        <list_save_with_form_button>false</list_save_with_form_button>
        <list_style/>
        <messages/>
        <name>Process</name>
        <onclick/>
        <order>100</order>
        <script><![CDATA[// try{
// current.update();
// }catch(e){
// 	gs.info("exception : " + e);
// }

try {

    var gr = new GlideRecord('x_440354_cvrf_inte_cvrf_configuration');
    gr.addQuery('vendor', current.vendor);
    gr.addQuery('type', current.type);
    gr.query();
    if (gr.next() && gr.sys_id != current.sys_id) {
        gs.addErrorMessage("Record for same vendor is already configured in same authentication type");
        current.setAbortAction(true);
    } else {
        try {
            gs.info('BR Fired - ');
            if (current.type == "API_BASED") {
                var sol_url;
                //auth_type = current.authentication_type.trim();
                //auth_url = current.authentication_endpoint;
                sol_url = current.solution_endpoint;


                //             if (current.instance != "") {
                //                 var instance = new GlideRecord("sn_sec_int_impl");
                //                 instance.get(current.instance);
                //                 instance.name = current.name;
                //                 instance.integration = gs.getProperty("x_440354_cvrf_inte.third_party_integration"); //"0a82e7212f3570101767d8ddf699b6f2";
                //                 var instanceID = instance.update();

                //                 /*var schedular = new GlideRecord("x_445396_cvrf_inte_cvrf_solution_integration");
                //                 schedular.initialize();
                //                 schedular.name = current.name;
                //                 schedular.integration = "0a82e7212f3570101767d8ddf699b6f2";
                //                 schedular.instance = instanceID;
                //                 //schedular.integration_script = "cd016f512ff530101767d8ddf699b6d7";
                //                 schedular.insert();*/


                //             } else {
                var instance = new GlideRecord("sn_sec_int_impl");
                if (gs.nil(current.instance))
                    instance.initialize();
                else
                    instance.get(current.instance);
                instance.name = current.name;
                instance.integration = gs.getProperty("x_440354_cvrf_inte.third_party_integration");
                var instanceID = instance.update();
                var schedular = new GlideRecord("x_440354_cvrf_inte_cvrf_solution_integration");
                if (gs.nil(current.schedular))
                    schedular.initialize();
                else
                    schedular.get(current.schedular);
                schedular.name = current.name;
                schedular.integration = gs.getProperty("x_440354_cvrf_inte.third_party_integration");
                schedular.instance = instanceID;
                schedular.vendor = current.vendor;
                schedular.integration_script = gs.getProperty("x_440354_cvrf_inte.solution_integration_script");
                schedular.integration_factory_script = "(function (integrationProcessGr) {return new x_440354_cvrf_inte.CVRFSolutionIntegration();})(integrationProcessGr);";
                if (current.run == 'weekly') {
                    schedular.run_dayofweek = current.run_dayofweek;
                }
                if (current.run == 'daily' || current.run == 'weekly' || current.run == 'monthly') {
                    schedular.run_time = current.time;
                }
                if (current.run == 'monthly') {
                    schedular.run_dayofmonth = current.run_dayofmonth;
                }
                if (current.run == 'periodically') {
                    schedular.run_period = current.run_period;
                }
                if (current.run == 'periodically' || current.run == 'once') {
                    schedular.run_start = current.run_start;
                }
                schedular.run_type = current.run;
                var schedular_id = schedular.update();
                
                gs.info("Scheduler : - " + JSON.stringify(schedular) + " run : " + current.run);

                var dataSources = ["7778b8e50702f010568cffa08c1ed009", "dcd17cdd07c2b010568cffa08c1ed026", "a1f13cdd07c2b010568cffa08c1ed0eb", "291234110706b010568cffa08c1ed093"]
				if (gs.nil(current.schedular)){
                for (var x in dataSources) {
                    var m2m = new GlideRecord("sn_vul_int_data_src");
                    m2m.initialize();
                    m2m.sys_data_source = dataSources[x];
                    m2m.sn_vul_integration = schedular_id;
                    m2m.insert();
                }
				}
				current.schedular = schedular_id;

                /*var instanceParameters = new GlideRecord("sn_sec_int_impl_config");
                instanceParameters.addQuery("implementation", instanceID);
                instanceParameters.addQuery("configuration", "a663e3612f3570101767d8ddf699b656");

                instanceParameters.query()
                if (instanceParameters.next()) {
                	instanceParameters.value = sol_url;
                	instanceParameters.update();
                }*/
                current.instance = instanceID;
                //             }

                var d = {
                    "11bc5bbf07713010568cffa08c1ed081": sol_url, // id of integration parameter: value from the form
                    //"6ddbdf7f07713010568cffa08c1ed03d": auth_type,
                    //"8fdcb2a62f3530101767d8ddf699b619": auth_url,
                    //"100c1f7f07713010568cffa08c1ed07c": user_name,
                    //"cf1cd3bf07713010568cffa08c1ed082": password,
                    //"a5df199f2fb130101767d8ddf699b600": current.client_id,
                    "c5ac1bbf07713010568cffa08c1ed03d": current.name,
                    //"ddff199f2fb130101767d8ddf699b6b5": current.client_secret_key.getDecryptedValue(),
                    //"ca5021df2fb130101767d8ddf699b62d": current.redirect_url,
                    //"bc702d9f2fb130101767d8ddf699b6d0": current.token_url,
                    //"9440ad9f2fb130101767d8ddf699b6de": current.authorization_url,
                    // "6b4c1b7f07713010568cffa08c1ed05d": current.oauth_provider,
                    //"616c53bf07713010568cffa08c1ed0ad": current.oauth_profile,
                    //"8d93ff090702b010568cffa08c1ed0e4": current.start_date,
                    //"eea373490702b010568cffa08c1ed0eb": current.end_date
                }
                var instanceParameters;
                for (var x in d) {
                    instanceParameters = new GlideRecord("sn_sec_int_impl_config");
                    instanceParameters.addQuery("implementation", instanceID);
                    instanceParameters.addQuery("configuration", x);

                    instanceParameters.query()
                    if (instanceParameters.next()) {
                        instanceParameters.value = d[x];
                        instanceParameters.update();
                    }
                }
            } else {
                //             gs.info('add data in the import queue entry');

                //                     gs.info('inside else part of BR');
                var ds = new GlideRecord("sys_data_source");

                var attachment = new GlideSysAttachment();
                var agr = attachment.getAttachments('x_440354_cvrf_inte_cvrf_configuration', current.sys_id);

                while (agr.next()) {
                    gs.info(agr.getValue('file_name'));

                    // 				var attachmentGr = new GlideRecord('sys_attachment');

                    var gr1 = new GlideRecord('sn_vul_ds_import_q_entry');
                    gr1.initialize();
                    gr1.data_source = '3a4a973f07713010568cffa08c1ed0e6';
                    gr1.status = 'QUEUED';
					gr1.x_440354_cvrf_inte_cvrf_configuration = current.sys_id;
                    gr1.x_440354_cvrf_inte_vendor_name = current.vendor;
                    var sysId = gr1.insert();
                    //                     gs.info('sys id of import queue entry : ' + sysId);

                    var content = attachment.getContent(agr);
                    var contentType = agr.getValue('content_type');
                    var fileName = agr.getValue('file_name');
                    attachment.write(gr1, fileName, contentType, content);




                    //var copiedAttachments2 = attachment.copy('x_440354_cvrf_inte_cvrf_configuration', current.sys_id, 'sn_vul_ds_import_q_entry', sysId);
                    //gs.info('file attached to import queue record :' + copiedAttachments2);
                }


                //         var gr = new GlideRecord('sn_vul_ds_import_q_entry');
                //         gr.initialize();
                //         gr.data_source = 'eae9dcad07753010568cffa08c1ed050';
                //         gr.status = 'QUEUED';
                //         var sysId = gr.insert();
                //         gs.info('sys id of import queue entry : ' + sysId);


                //         var attachment = new GlideSysAttachment();
                //         var copiedAttachments2 = attachment.copy('x_445396_cvrf_inte_cvrf_xml_configuration', current.sys_id, 'sn_vul_ds_import_q_entry', sysId);
                //         gs.info('file attached to import queue record :' + copiedAttachments2);


                //         gs.info('file attached to sys_data_source record :' + copiedAttachments);

                // 		var mgr = new sn_vul.VulnerabilityDSAttachmentManager();
                // 		mgr.processQueue();
                //             gs.info('Queue processed');       
            }
            current.update();
        } catch (e) {
            gs.info("Exception in BR : " + e);
        }
    }

    // 		
} catch (e) {
    gs.info("Exception in BR : " + e);
}]]></script>
        <show_insert>true</show_insert>
        <show_multiple_update>false</show_multiple_update>
        <show_query>false</show_query>
        <show_update>true</show_update>
        <sys_class_name>sys_ui_action</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-09-30 11:36:09</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>ca57a71f1bf23c1c8f4aedb8b04bcb2b</sys_id>
        <sys_mod_count>35</sys_mod_count>
        <sys_name>Process</sys_name>
        <sys_overrides/>
        <sys_package display_value="CVRF Integration for Security Operations" source="x_440354_cvrf_inte">65c6033f07313010568cffa08c1ed041</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="CVRF Integration for Security Operations">65c6033f07313010568cffa08c1ed041</sys_scope>
        <sys_update_name>sys_ui_action_ca57a71f1bf23c1c8f4aedb8b04bcb2b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-10-06 13:07:25</sys_updated_on>
        <table>x_440354_cvrf_inte_cvrf_configuration</table>
        <ui11_compatible>true</ui11_compatible>
        <ui16_compatible>false</ui16_compatible>
    </sys_ui_action>
</record_update>
